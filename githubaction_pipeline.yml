name: Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      bdp_workspace:
        description: 'Environment (workspace) to deploy/update'
        required: true
        default: 'dev-us'
        type: choice
        options:
          - dev-us
          - stage-us
          - prod-us
          - prod-npb
      action:
        description: 'Terraform action. If destroying, have you disabled delete protection?'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy
      deploy_pulsar:
        description: 'Whether to (re-)deploy Pulsar. Not recommended when upgrading an existing environment - if doing so, stop all BDP & Pulsar services beforehand.'
        required: true
        default: 'no'
        type: choice
        options:
          - no
          - yes

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ secrets.TF_VERSION }}

      - name: Load config
        id: load_config
        run: |
          config_file="BDP/terraform/conf/${{ github.event.inputs.bdp_workspace }}.yml"
          echo "Loading config from $config_file"
          vars=$(cat $config_file | yq e -o=json)
          echo "vars=$vars" >> $GITHUB_ENV

      - name: Write Terraform vars
        run: |
          vars_to_remove="aws_account workspace_name aws_s3_tracking_bucket_region pulsar_jwt_symmetric_key pulsar_jwt_proxy_admin_token pulsar_jwt_broker_admin_token pulsar_jwt_fw_admin_token pulsar_jwt_internal_admin_token pulsar_manager_admin_password tracking_sink_version tracking_sink_count segment_function_version segment_function_count datadog_global_processing_rules"
          filtered_vars=$(echo $vars | jq 'del(.[] | select(index($vars_to_remove) != null))')
          echo $filtered_vars | jq '.' > BDP/terraform/terraform.tfvars.json

      - name: Terraform init and plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd BDP/terraform
          terraform init -upgrade
          terraform workspace select ${{ vars.workspace_name }} || terraform workspace new ${{ vars.workspace_name }}
          terraform workspace show
          terraform plan -input=false

      - name: Approval
        if: env.plan_status == 2
        uses: hmarr/auto-approve-action@v2

      - name: Terraform apply/destroy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd BDP/terraform
          if [[ "${{ github.event.inputs.action }}" == "apply" ]]; then
            terraform apply -auto-approve
            ansible_hosts=$(terraform output -raw ansible-inventory)
            echo "$ansible_hosts" > ../Pulsar/ansible/inventory/hosts
            pulsar_service_url=$(terraform output -raw pulsar_public_nlb_broker_url)
            pulsar_http_url=$(terraform output -raw pulsar_public_nlb_admin_url)
          else
            terraform destroy -auto-approve
            terraform workspace select default
            terraform workspace delete ${{ vars.workspace_name }}
          fi

      - name: Plan Terraform
        if: ${{ github.event.inputs.action == 'destroy' }}
        uses: HawkEyeInnovations/GithubSharedWorkflows/.github/workflows/terraform-plan.yml@v0.0.41
        with:
          working_directory: ${{ secrets.PROJECT }}/${{ secrets.STACK }}
          aws_region: ${{ secrets.AWS_S3_EVENTS_BUCKET_REGION }}
          aws_account_id: ${{ secrets.BDP_WORKSPACE == 'dev-us' && '682352645723' || secrets.BDP_WORKSPACE == 'prod-us' && '682171097471' || '682352645723' }}
          aws_role_session_name: gha-plan-baseball-infra
          var_file: ../${{ github.event.inputs.bdp_workspace }}.tfvars
          workspace: ${{ github.event.inputs.bdp_workspace }}
          create_workspace_if_not_exists: true
          run_checkov: true
          checkov_soft_fail: true
          run_tflint: true
          plan_options: ${{ github.event.inputs.action == 'destroy' && '-destroy -detailed-exitcode' || '' }}
        secrets: inherit
        continue-on-error: true

      - name: Deploy Pulsar
        if: ${{ github.event.inputs.deploy_pulsar == 'yes' && github.event.inputs.action == 'apply' && env.plan_status == 2 }}
        uses: ./.github/actions/deploy-pulsar
        with:
          tf_workspace: ${{ github.event.inputs.bdp_workspace }}
          ansible_dir: ${{ secrets.ANSIBLE_DIR }}
          ansible_hosts: ${{ secrets.ANSIBLE_HOSTS }}
          pulsar_service_url: ${{ secrets.PULSAR_SERVICE_URL }}
          pulsar_http_url: ${{ secrets.PULSAR_HTTP_URL }}
          pulsar_jwt_symmetric_key: ${{ secrets.PULSAR_JWT_SYMMETRIC_KEY }}
          pulsar_jwt_proxy_admin_token: ${{ secrets.PULSAR_JWT_PROXY_ADMIN_TOKEN }}
          pulsar_jwt_broker_admin_token: ${{ secrets.PULSAR_JWT_BROKER_ADMIN_TOKEN }}
          pulsar_jwt_fw_admin_token: ${{ secrets.PULSAR_JWT_FW_ADMIN_TOKEN }}
          pulsar_jwt_internal_admin_token: ${{ secrets.PULSAR_JWT_INTERNAL_ADMIN_TOKEN }}
          pulsar_jwt_tdp_admin_token: ${{ secrets.PULSAR_JWT_TDP_ADMIN_TOKEN }}
          pulsar_manager_admin_password: ${{ secrets.PULSAR_MANAGER_ADMIN_PASSWORD }}
          datadog_api_key: ${{ secrets.DATADOG_API_KEY }}
          ec2_ssh_key: ${{ secrets.EC2_SSH_KEY }}

      - name: Notify Slack (Success)
        if: success()
        uses: rtCamp/action-slack-notify@v2
        with:
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          message: "Successful: Job '${{ github.event_name }} [${{ github.run_number }}]' to '${{ github.event.inputs.action }}' (${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          

      - name: Notify Slack (Failure)
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        with:
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          message: "Failed: Job '${{ github.event_name }} [${{ github.run_number }}]' to '${{ github.event.inputs.action }}' (${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          
