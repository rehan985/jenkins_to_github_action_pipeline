name: Terraform Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      project:
        description: 'Project/team to update'
        required: true
        default: 'reprocessing'
        type: choice
        options:
          - reprocessing
          - stats_dashboard
      action:
        description: 'Terraform action'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy
      layer:
        description: 'Infra layer to update'
        required: true
        default: 'stats-dashboard'
        type: choice
        options:
          - stats-dashboard
          - video-uploader
          - cluster
          - compute
          - networking
          - rds
          - sftp
      env:
        description: 'Environment (workspace) to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - stage
          - prod
      aws_region:
        description: 'AWS region to deploy to'
        required: true
        default: 'us-east-1'
        type: choice
        options:
          - us-east-1
          - ap-northeast-1

jobs:
  terraform:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.7

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.aws_region }}

      - name: Initialize Terraform
        run: |
          export PATH="/opt/hostedtoolcache/terraform/1.3.7/x64/bin:$PATH"
          cd ${{ github.event.inputs.project }}/${{ github.event.inputs.layer }}
          terraform init -upgrade
          tf_workspace="dev"
          case "${{ github.event.inputs.env }}" in
            dev)
              tf_workspace="dev"
              [[ "${{ github.event.inputs.aws_region }}" == "ap-northeast-1" ]] && tf_workspace="dev-apac"
              ;;
            stage)
              tf_workspace="stage"
              [[ "${{ github.event.inputs.aws_region }}" == "ap-northeast-1" ]] && tf_workspace="st-apac"
              ;;
            prod)
              tf_workspace="prod"
              [[ "${{ github.event.inputs.aws_region }}" == "ap-northeast-1" ]] && tf_workspace="pr-apac"
              ;;
          esac
          terraform workspace select $tf_workspace || terraform workspace new $tf_workspace
          terraform workspace show

      - name: Plan Terraform
        id: plan
        run: |
          plan_options=""
          [[ "${{ github.event.inputs.action }}" == "destroy" ]] && plan_options="-destroy -detailed-exitcode"
          terraform plan $plan_options -out plan.bin -var-file=../$tf_workspace.tfvars -compact-warnings
        continue-on-error: true

      - name: Check Plan Status
        run: |
          if [[ ${{ steps.plan.outcome }} == "failure" ]]; then
            echo "Terraform plan failed, please check console output"
            exit 1
          fi

      - name: Wait for Approval
        if: github.event.inputs.action == 'apply'
        uses: hmarr/auto-approve-action@v2
        with:
          pull-request-number: ${{ github.event.inputs.pull_request_number }}

      - name: Apply Terraform
        if: ${{ github.event.inputs.action }} == 'apply'
        run: |
          terraform apply -auto-approve plan.bin -compact-warnings

      - name: Destroy Terraform
        if: ${{ github.event.inputs.action }} == 'destroy'
        run: |
          terraform destroy -auto-approve -var-file=../$tf_workspace.tfvars -compact-warnings